

Vamos adicionar as funções de carregamento de sintomas e síndromes ao arquivo de conexão do banco de dados:

```python:src/database/db_connection.py
import sqlite3
import logging
import json
import unicodedata
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DB_PATH = Path('data/syndrome_data.db')

def get_db_connection():
    try:
        conn = sqlite3.connect(DB_PATH)
        logger.info('Conexão com SQLite estabelecida com sucesso')
        return conn
    except sqlite3.Error as e:
        logger.error(f'Erro ao conectar ao SQLite: {e}')
        return None

def load_symptoms():
    logger.debug("Carregando sintomas do banco de dados.")
    conn = get_db_connection()
    if conn:
        try:
            query = "SELECT DISTINCT signs FROM syndromes"
            cursor = conn.execute(query)
            all_signs = cursor.fetchall()
            conn.close()
            
            symptoms_set = set()
            for signs_tuple in all_signs:
                sign = signs_tuple[0].strip()
                normalized_sign = unicodedata.normalize('NFD', sign).encode('ascii', 'ignore').decode('utf-8').lower()
                symptoms_set.add((sign, normalized_sign))
            
            symptoms = sorted([s[0] for s in symptoms_set])
            logger.debug(f"{len(symptoms)} sintomas únicos carregados.")
            return symptoms
        except Exception as e:
            logger.error(f"Erro ao processar sintomas: {e}")
            if conn: conn.close()
            return []
    return []

def load_syndromes():
    logger.debug("Carregando todas as síndromes do banco de dados.")
    conn = get_db_connection()
    if conn:
        try:
            query = """
                SELECT syndrome_name, signs, locals, arteries, 
                       notes, is_ipsilateral, local_name, vessel_name 
                FROM syndromes
            """
            cursor = conn.execute(query)
            syndromes = cursor.fetchall()
            conn.close()
            
            processed_syndromes = []
            for row in syndromes:
                syndrome = {
                    "syndrome_name": row[0],
                    "signs": json.loads(row[1]),
                    "locals": row[2],
                    "arteries": row[3],
                    "notes": row[4],
                    "is_ipsilateral": row[5],
                    "local_name": row[6],
                    "vessel_name": row[7]
                }
                processed_syndromes.append(syndrome)
            return processed_syndromes
        except Exception as e:
            logger.error(f"Erro ao processar síndromes: {e}")
            if conn: conn.close()
            return []
    return []

def close_connection(connection):
    if connection:
        connection.close()
        logger.info('Conexão com SQLite fechada')
```

Este código:
1. Mantém a mesma lógica do seu código original (referência ao arquivo ```src/original_app.py``` linhas 54-87 e 90-120)
2. Usa o mesmo formato de logging que você já tem
3. Mantém a estrutura de dados existente (referência ao arquivo ```data/3_database_structure_SQL.txt``` linhas 3-14)

Quer que eu atualize também o arquivo app.py para usar estas novas funções?


THEN





Vamos atualizar o arquivo `app.py` para usar as funções do `db_connection.py`. Aqui está o novo código:

```python:src/app.py
import streamlit as st
import requests
import json
import logging
from pathlib import Path
from database.db_connection import get_db_connection, load_symptoms, load_syndromes

# Configuração de Logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('logs/app.log'),
        logging.StreamHandler()
    ]
)

def get_llm_response(prompt):
    logging.debug("Enviando prompt para LLaMA")
    try:
        response = requests.post(
            'http://localhost:11434/api/generate',
            json={
                "model": "llama2",
                "prompt": prompt,
                "stream": False
            }
        )
        response.raise_for_status()
        return response.json().get('response', '')
    except Exception as e:
        logging.error(f"Erro ao conectar com LLaMA: {e}")
        return None

def main():
    st.title("Louis - Sistema de Análise Neurológica")
    
    # Carregar sintomas e síndromes
    symptoms = load_symptoms()
    syndromes = load_syndromes()
    
    # Mostrar status no sidebar
    if symptoms and syndromes:
        st.sidebar.success(f"Banco conectado - {len(syndromes)} síndromes")
    else:
        st.sidebar.error("Erro ao conectar ao banco")
    
    # Interface principal
    user_input = st.text_area(
        "Digite os sintomas do paciente:",
        placeholder="Exemplo: dor de cabeça, tontura, fraqueza no braço direito"
    )
    
    if st.button("Analisar"):
        if user_input:
            with st.spinner("Processando..."):
                # Teste do LLaMA
                test_prompt = f"Liste os principais sintomas neste texto: {user_input}"
                response = get_llm_response(test_prompt)
                
                if response:
                    st.success("LLaMA conectado!")
                    st.write("Sintomas identificados:", response)
                    
                    # Exibir síndromes relacionadas
                    st.subheader("Síndromes Relacionadas")
                    for syndrome in syndromes[:3]:  # Mostrar top 3 por enquanto
                        with st.expander(syndrome['syndrome_name']):
                            st.write(f"**Sintomas:** {', '.join(syndrome['signs'])}")
                            st.write(f"**Localização:** {syndrome['locals']}")
                            st.write(f"**Artérias:** {syndrome['arteries']}")
                else:
                    st.error("Erro ao conectar com LLaMA")
        else:
            st.warning("Digite algum sintoma")

if __name__ == "__main__":
    main()
```

Este código:
1. Usa as funções de banco de dados do arquivo `db_connection.py` que criamos
2. Mantém a mesma estrutura da interface original (referência ao arquivo `src/original_app.py` linhas 199-236)
3. Adiciona exibição de síndromes relacionadas (baseado no formato de dados do arquivo `data/3_database_structure_SQL.txt`)
