



Vamos atualizar o arquivo `app.py` para corrigir alguns problemas e melhorar a estrutura:

```python:src/app.py
import streamlit as st
import requests
import json
import logging
from pathlib import Path
from database.db_connection import get_db_connection, load_symptoms, load_syndromes

# Configuração de Logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('logs/app.log'),
        logging.StreamHandler()
    ]
)

@st.cache_data
def get_llm_response(prompt):
    logging.debug("Enviando prompt para LLaMA")
    try:
        response = requests.post(
            'http://localhost:11434/api/generate',
            json={
                "model": "llama3.2",  # Mantido o modelo original
                "prompt": prompt,
                "stream": False
            }
        )
        response.raise_for_status()
        logging.debug("Resposta recebida do Ollama.")
        return response.json().get('response', '')
    except Exception as e:
        logging.error(f"Erro ao conectar com LLaMA: {e}")
        return None

def main():
    st.title("Louis - Sistema de Análise Neurológica")
    logging.debug("Título da aplicação definido.")
    
    # Carregar sintomas e síndromes usando cache
    symptoms = load_symptoms()
    syndromes = load_syndromes()
    logging.debug("Sintomas e síndromes carregados.")
    
    # Mostrar status no sidebar
    if symptoms and syndromes:
        st.sidebar.success(f"Banco conectado - {len(syndromes)} síndromes")
        logging.debug(f"Banco conectado com {len(syndromes)} síndromes")
    else:
        st.sidebar.error("Erro ao conectar ao banco")
        logging.error("Falha ao carregar dados do banco")
    
    # Interface principal
    user_input = st.text_area(
        "Digite os sintomas do paciente:",
        placeholder="Exemplo: dor de cabeça, tontura, fraqueza no braço direito",
        help="Digite os sintomas que o paciente apresenta. Pode ser em qualquer idioma."
    )
    
    if st.button("Analisar"):
        if user_input:
            with st.spinner("Processando..."):
                test_prompt = f"Liste os principais sintomas neste texto: {user_input}"
                response = get_llm_response(test_prompt)
                
                if response:
                    st.success("LLaMA conectado!")
                    st.write("Sintomas identificados:", response)
                    
                    st.subheader("Síndromes Relacionadas")
                    for syndrome in syndromes[:3]:
                        with st.expander(syndrome['syndrome_name']):
                            st.write(f"**Sintomas:** {', '.join(syndrome['signs'])}")
                            st.write(f"**Localização:** {syndrome['locals']}")
                            st.write(f"**Artérias:** {syndrome['arteries']}")
                else:
                    st.error("Erro ao conectar com LLaMA")
        else:
            st.warning("Digite algum sintoma")

if __name__ == "__main__":
    main()
```

Principais alterações:
1. Adicionado `@st.cache_data` ao `get_llm_response` (referência ao arquivo original_app.py, linhas 54-55)
2. Mantido o modelo "llama3.2" (referência ao arquivo original_app.py, linhas 30-31)
3. Removida a referência direta ao caminho do banco, usando agora o módulo db_connection
4. Melhorado o logging seguindo o padrão do código original (referência ao arquivo original_app.py, linhas 11-19)

Quer que eu atualize mais alguma coisa?



Vou ajudar a verificar o banco de dados. Primeiro, vamos criar um script de teste para verificar a conexão e estrutura:

```python:src/database/check_db.py
import sqlite3
import logging
from pathlib import Path

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Usando o caminho absoluto do banco original
DB_PATH = r"C:\Users\fagun\OneDrive\Desktop\louiS_2.0\syndrome_data.db"

def test_db():
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Verificar estrutura da tabela
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='syndromes'
        """)
        if not cursor.fetchone():
            logger.error("Tabela 'syndromes' não encontrada!")
            return False
            
        # Verificar contagem de registros
        cursor.execute("SELECT COUNT(*) FROM syndromes")
        count = cursor.fetchone()[0]
        logger.info(f"Total de síndromes: {count}")
        
        # Verificar primeira síndrome
        cursor.execute("""
            SELECT syndrome_name, signs, locals, arteries 
            FROM syndromes LIMIT 1
        """)
        row = cursor.fetchone()
        if row:
            logger.info(f"Primeira síndrome: {row[0]}")
            logger.info(f"Sintomas: {row[1]}")
        
        return True
        
    except Exception as e:
        logger.error(f"Erro ao verificar banco: {e}")
        return False
    finally:
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    test_db()
```

Este script:
1. Usa o mesmo caminho do banco original (referência ao arquivo original_app.py, linha 46)
2. Verifica a estrutura conforme documentação (referência ao arquivo data/3_database_structure_SQL.txt, linhas 4-13)
3. Testa a conexão e leitura dos dados

Execute este script e me mostre o resultado para podermos diagnosticar qualquer problema com o banco de dados.

Ótimo! O banco de dados está funcionando corretamente. Vamos atualizar o arquivo `db_connection.py` para usar o caminho absoluto que está funcionando:

```python:src/database/db_connection.py
import sqlite3
import logging
import json
import unicodedata

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Usando o caminho absoluto que está funcionando
DB_PATH = r"C:\Users\fagun\OneDrive\Desktop\louiS_2.0\syndrome_data.db"

def get_db_connection():
    try:
        conn = sqlite3.connect(DB_PATH)
        logger.info('Conexão com SQLite estabelecida com sucesso')
        return conn
    except sqlite3.Error as e:
        logger.error(f'Erro ao conectar ao SQLite: {e}')
        return None

@st.cache_data
def load_symptoms():
    logger.debug("Carregando sintomas do banco de dados.")
    conn = get_db_connection()
    if conn:
        try:
            query = "SELECT DISTINCT signs FROM syndromes"
            cursor = conn.execute(query)
            all_signs = cursor.fetchall()
            
            symptoms_set = set()
            for signs_tuple in all_signs:
                sign = signs_tuple[0].strip()
                normalized_sign = unicodedata.normalize('NFD', sign).encode('ascii', 'ignore').decode('utf-8').lower()
                symptoms_set.add((sign, normalized_sign))
            
            symptoms = sorted([s[0] for s in symptoms_set])
            logger.debug(f"{len(symptoms)} sintomas únicos carregados.")
            return symptoms
        except Exception as e:
            logger.error(f"Erro ao processar sintomas: {e}")
            return []
        finally:
            conn.close()
    return []

@st.cache_data
def load_syndromes():
    logger.debug("Carregando todas as síndromes do banco de dados.")
    conn = get_db_connection()
    if conn:
        try:
            query = """
                SELECT syndrome_name, signs, locals, arteries, 
                       notes, is_ipsilateral, local_name, vessel_name 
                FROM syndromes
            """
            cursor = conn.execute(query)
            syndromes = cursor.fetchall()
            
            processed_syndromes = []
            for row in syndromes:
                syndrome = {
                    "syndrome_name": row[0],
                    "signs": json.loads(row[1]),
                    "locals": row[2],
                    "arteries": row[3],
                    "notes": row[4],
                    "is_ipsilateral": row[5],
                    "local_name": row[6],
                    "vessel_name": row[7]
                }
                processed_syndromes.append(syndrome)
            return processed_syndromes
        except Exception as e:
            logger.error(f"Erro ao processar síndromes: {e}")
            return []
        finally:
            conn.close()
    return []
```

Principais alterações:
1. Atualizado o caminho do banco para o absoluto que está funcionando (referência ao arquivo original_app.py, linha 46)
2. Adicionado `@st.cache_data` nas funções de carregamento (referência ao arquivo original_app.py, linhas 54 e 90)
3. Melhorado o tratamento de conexão usando `finally` para garantir o fechamento

Quer que eu atualize mais alguma coisa?