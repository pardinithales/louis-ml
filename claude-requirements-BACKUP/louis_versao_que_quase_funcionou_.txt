import streamlit as st
import requests
import json
import logging
from pathlib import Path
from database.db_connection import get_db_connection, load_symptoms, load_syndromes

# Configuração de Logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('logs/app.log'),
        logging.StreamHandler()
    ]
)

# Referência ao caminho original do banco
DB_PATH = r"C:\Users\fagun\OneDrive\Desktop\louiS_2.0\syndrome_data.db"

def get_llm_response(prompt):
    logging.debug("Enviando prompt para LLaMA")
    try:
        response = requests.post(
            'http://localhost:11434/api/generate',
            json={
                "model": "llama3.2",
                "prompt": prompt,
                "stream": False
            }
        )
        response.raise_for_status()
        return response.json().get('response', '')
    except Exception as e:
        logging.error(f"Erro ao conectar com LLaMA: {e}")
        return None

def analyze_symptoms_progressive(symptoms_list, syndromes):
    logging.debug(f"Analisando lista de sintomas: {symptoms_list}")
    
    # Normalizar sintomas da lista atual
    symptoms_list = [s.strip('"\' ') for s in symptoms_list]
    
    matched_syndromes = []
    for syndrome in syndromes:
        matches = 0
        total_signs = len(syndrome['signs'])
        
        # Normalizar sintomas da síndrome
        syndrome_signs = [s.strip('"\' ') for s in syndrome['signs']]
        
        for symptom in symptoms_list:
            if symptom.lower() in [s.lower() for s in syndrome_signs]:
                matches += 1
        
        if matches > 0:
            match_score = matches / total_signs
            matched_syndromes.append({
                'syndrome': syndrome,
                'score': match_score,
                'matched_count': matches
            })
    
    matched_syndromes.sort(key=lambda x: x['score'], reverse=True)
    return matched_syndromes[:4]

def filter_symptoms(search_term: str, symptoms_list: list) -> list:
    """Filtra sintomas baseado no termo de busca"""
    if not search_term:
        return []
    search_term = search_term.lower()
    return [s for s in symptoms_list if search_term in s.lower()]

def normalize_symptoms(symptoms):
    """Normaliza a lista de sintomas"""
    normalized = []
    for symptom in symptoms:
        if isinstance(symptom, str):
            # Remove aspas, colchetes e espaços extras
            clean_symptom = symptom.strip('[]"\'').strip()
            # Divide se houver múltiplos sintomas
            individual_symptoms = [s.strip() for s in clean_symptom.split(',')]
            normalized.extend(individual_symptoms)
        else:
            normalized.append(symptom)
    return list(set(normalized))  # Remove duplicatas

def main():
    st.title("Louis - Sistema de Análise Neurológica")
    
    symptoms = load_symptoms()
    syndromes = load_syndromes()
    
    if not symptoms or not syndromes:
        st.error("Erro ao carregar banco de dados")
        return
        
    # Normalizar lista de sintomas
    symptoms = normalize_symptoms(symptoms)
    
    st.sidebar.success(f"Banco conectado - {len(syndromes)} síndromes")
    
    # Lista para armazenar sintomas
    if 'symptoms_list' not in st.session_state:
        st.session_state.symptoms_list = []
    
    # Campo único com autocomplete
    new_symptom = st.selectbox(
        "Digite ou selecione um sintoma:",
        options=[""] + symptoms,  # Adiciona opção vazia no início
        key="symptom_input",
        index=0,  # Começa vazio
        format_func=lambda x: x.strip('"\'') if x else "Digite para buscar...",
        help="Digite para filtrar os sintomas disponíveis"
    )
    
    col1, col2 = st.columns([1,4])
    with col1:
        if st.button("Adicionar") and new_symptom:
            if len(st.session_state.symptoms_list) < 6:
                clean_symptom = new_symptom.strip('"\' ')
                if clean_symptom not in st.session_state.symptoms_list:
                    st.session_state.symptoms_list.append(clean_symptom)
                    st.experimental_rerun()  # Limpa a seleção
    with col2:
        if st.button("Limpar Todos"):
            st.session_state.symptoms_list = []
            st.experimental_rerun()
    
    # Mostrar sintomas atuais
    if st.session_state.symptoms_list:
        st.write("Sintomas atuais:", ", ".join(st.session_state.symptoms_list))
        
        # Análise progressiva
        matched_syndromes = analyze_symptoms_progressive(
            st.session_state.symptoms_list, 
            syndromes
        )
        
        # Exibir resultados
        st.subheader("Síndromes Prováveis")
        for match in matched_syndromes:
            syndrome = match['syndrome']
            with st.expander(
                f"{syndrome['syndrome_name']} ({match['matched_count']} sintomas em comum)"
            ):
                signs = syndrome['signs']
                # Destacar sintomas que deram match
                highlighted_signs = [
                    f"**{sign}**" if sign.lower() in [s.lower() for s in st.session_state.symptoms_list]
                    else sign
                    for sign in signs
                ]
                st.write("Sintomas:", ", ".join(highlighted_signs))
                st.write(f"**Localização:** {syndrome['locals']}")
                st.write(f"**Artérias:** {syndrome['arteries']}")

if __name__ == "__main__":
    main()